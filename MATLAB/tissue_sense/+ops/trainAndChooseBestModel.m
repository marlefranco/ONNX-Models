function [results, info, session] = trainAndChooseBestModel(dataTrain, splitIdx)

%% Initialize parameters to run trials over
dataParameters = optimizeParameter.empty(0,1);
modelParameters = optimizeParameter.empty(0,1);
%{
% Data parameters 
dataParameters(1) = optimizeParameter.new(...
    "Name", "Normalization", ...
    "Range", ["none", "zscore", "range"], ...
    "Type", "Discrete");

dataParameters(2) = optimizeParameter.new(...
    "Name", "FeatureSelection", ...
    "Range", ["none", "fscchi2", "pca"], ...
    "Type", "Set");

dataParameters(3) = optimizeParameter.new(...
    "Name", "FeatureExtraction", ...
    "Range", ["none", "descriptivestatistics"], ...
    "Type", "Set");

% Model Parameters
modelParameters(1) = optimizeParameter.new(...
    "Name", "KFold", ...
    "Range", 5,...
    "Type", "Discrete");

modelParameters(2) = optimizeParameter.new(...
    "Name", "Learners", ...
    "Range", {["tree", "discr",  "knn",  "svm", ...
    "ensemble", "ecoc", "linear", "kernel", "nnet"]},...
    "Type", "Set");
%}
% Data parameters 
dataParameters(1) = optimizeParameter.new(...
    "Name", "Normalization", ...
    "Range", ["none"], ...
    "Type", "Discrete");

dataParameters(2) = optimizeParameter.new(...
    "Name", "FeatureSelection", ...
    "Range", ["none"], ...
    "Type", "Set");

dataParameters(3) = optimizeParameter.new(...
    "Name", "FeatureExtraction", ...
    "Range", ["none"], ...
    "Type", "Set");

% Model Parameters
modelParameters(1) = optimizeParameter.new(...
    "Name", "KFold", ...
    "Range", 5,...
    "Type", "Discrete");

modelParameters(2) = optimizeParameter.new(...
    "Name", "Learners", ...
    "Range", {["tree", "discr"]},...
    "Type", "Set");

%% Initialize session

session = experiment.Classification( ...
    "Data", dataTrain, ...
    "Model", "automl", ...
    "DataFcn", @(x, settings)basePipelineTrain(x, "TrainIndices", splitIdx{1}, ...
    settings{:}), ...
    "DataConfiguration", dataParameters, ...
    "ModelConfiguration", modelParameters, ...
    "Search", "gridsearch", ...
    "NumGridDivisions", 2 ...
    );

%% Run session
session.validate();
session.build();
session.preview();
session.run();

%% Evaluate session
% evalT = session.describe();
% evalT = [evalT(:,1:9) evalT(:,14) evalT(:,10:13) evalT(:,15:18)];

%% Extract session results
sessionResults = session.sort("Metric","errorOnTest"); 
sessionResults = [sessionResults(:,1:2), sessionResults(:,[8,9,14]), ...
    sessionResults(:,3:7), sessionResults(:,[10:13,15:18])];

% choose model with minimum accuracy difference from the top 10 models
[~,sortIdx] = sort(abs(sessionResults.errorOnCV - sessionResults.errorOnTest), "ascend");
iD = find(sortIdx<=10, 1); 
[results, info] = session.select(iD, "Metadata", true);
end